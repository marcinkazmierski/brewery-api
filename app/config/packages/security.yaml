security:
#    encoders:
#        # Our user class and the algorithm we'll use to encode passwords
#        # https://symfony.com/doc/current/security.html#c-encoding-the-user-s-password
#        App\Application\Domain\Entity\User: bcrypt
    password_hashers:
        # Use native password hasher, which auto-selects and migrates the best
        # possible hashing algorithm (which currently is "bcrypt")
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        custom_user_provider:
            entity:
                class: App\Application\Domain\Entity\User
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
#            anonymous: true
            provider: custom_user_provider
            custom_authenticators:
                - App\Security\TokenAuthenticatorMiddleware
        main:
            lazy: true
            custom_authenticator: App\Security\AdminAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
#            anonymous: true
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/documentation, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
